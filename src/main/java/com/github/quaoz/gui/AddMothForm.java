package com.github.quaoz.gui;

import com.github.quaoz.managers.MothManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import java.awt.*;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.lang.reflect.Method;
import java.util.Calendar;
import java.util.ResourceBundle;
import java.util.regex.Pattern;
import javax.swing.*;

public class AddMothForm {

	private JPanel panel;
	private JTextField speciesField;
	private JLabel speciesLabel;
	private JLabel speciesValidLabel;
	private JLabel sciNameLabel;
	private JTextField sciNameField;
	private JLabel sciNameValidLabel;
	private JPanel sizePanel;
	private JSpinner sizeLowerSpinner;
	private JSpinner sizeUpperSpinner;
	private JLabel sizeLabel;
	private JLabel sizeToLabel;
	private JLabel flightTimeLabel;
	private JPanel flightPanel;
	private JSpinner flightStartSpinner;
	private JLabel flightToLabel;
	private JSpinner flightEndSpinner;
	private JLabel habitatLabel;
	private JTextField habitatField;
	private JLabel foodLabel;
	private JTextField foodField;
	private JButton submitButton;
	private JButton cancelButton;

	public AddMothForm() {
		sizeLowerSpinner.setModel(new SpinnerNumberModel(0, 0, 30, 0.1));
		sizeUpperSpinner.setModel(new SpinnerNumberModel(1, 0, 30, 0.1));
		flightStartSpinner.setModel(
			new SpinnerNumberModel(
				Calendar.getInstance().get(Calendar.MONTH) + 1,
				1,
				12,
				1
			)
		);
		flightEndSpinner.setModel(
			new SpinnerNumberModel(
				Calendar.getInstance().get(Calendar.MONTH) + 1,
				1,
				12,
				1
			)
		);

		cancelButton.addActionListener(e ->
			GUI.getInstance().render(GUI.Content.PAST_CONTENT)
		);

		speciesField.addActionListener(e -> checkSpecies());
		speciesField.addFocusListener(
			new FocusListener() {
				@Override
				public void focusGained(FocusEvent e) {
					if (!e.isTemporary()) {
						speciesValidLabel.setText("");
					}
				}

				@Override
				public void focusLost(FocusEvent e) {
					checkSpecies();
				}
			}
		);

		sciNameField.addActionListener(e -> checkSciName());
		sciNameField.addFocusListener(
			new FocusListener() {
				@Override
				public void focusGained(FocusEvent e) {
					if (!e.isTemporary()) {
						sciNameValidLabel.setText("");
					}
				}

				@Override
				public void focusLost(FocusEvent e) {
					checkSciName();
				}
			}
		);

		submitButton.addActionListener(e -> {
			if (checkSpecies() && checkSciName()) {
				Double sizeLower = (Double) sizeLowerSpinner.getValue();
				Double sizeUpper = (Double) sizeUpperSpinner.getValue();

				if (sizeLower > sizeUpper) {
					Double tmp = sizeLower;
					sizeLower = sizeUpper;
					sizeUpper = tmp;
				}

				Integer flightStart = (Integer) flightStartSpinner.getValue();
				Integer flightEnd = (Integer) flightEndSpinner.getValue();

				if (flightStart > flightEnd) {
					Integer tmp = flightStart;
					flightStart = flightEnd;
					flightEnd = tmp;
				}

				if (
					MothManager
						.getInstance()
						.basicSearch(speciesField.getText().strip()) !=
					null
				) {
					MothManager.getInstance().remove(speciesField.getText().strip());
				}

				MothManager
					.getInstance()
					.addMoth(
						speciesField.getText().strip(),
						sciNameField.getText().strip(),
						sizeLower,
						sizeUpper,
						flightStart,
						flightEnd,
						habitatField.getText().strip(),
						foodField.getText().strip()
					);

				GUI.getInstance().render(GUI.Content.PAST_CONTENT);
			}
		});
	}

	private boolean checkSpecies() {
		String species = speciesField.getText().strip();

		if (species.length() > 1) {
			if (!Pattern.compile("[^a-zA-Z ]").matcher(species).find()) {
				return true;
			} else {
				speciesValidLabel.setText("Species name may only contain letters");
			}
		}

		return false;
	}

	private boolean checkSciName() {
		String species = sciNameField.getText().strip();

		if (species.length() > 1) {
			if (!Pattern.compile("[^a-zA-Z ]").matcher(species).find()) {
				return true;
			} else {
				sciNameValidLabel.setText("Scientific name may only contain letters");
			}
		}

		return false;
	}

	public JPanel resolve() {
		return panel;
	}

	// spotless:off

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panel = new JPanel();
		panel.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:d:grow", "center:d:grow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:d:grow"));
		panel.setMinimumSize(new Dimension(768, 768));
		panel.setPreferredSize(new Dimension(768, 768));
		speciesLabel = new JLabel();
		this.$$$loadLabelText$$$(speciesLabel, this.$$$getMessageFromBundle$$$("ia", "species.name"));
		CellConstraints cc = new CellConstraints();
		panel.add(speciesLabel, cc.xy(3, 3));
		speciesField = new JTextField();
		panel.add(speciesField, cc.xy(3, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
		final Spacer spacer1 = new Spacer();
		panel.add(spacer1, cc.xy(5, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
		final Spacer spacer2 = new Spacer();
		panel.add(spacer2, cc.xy(1, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
		final Spacer spacer3 = new Spacer();
		panel.add(spacer3, cc.xy(3, 1, CellConstraints.DEFAULT, CellConstraints.FILL));
		final Spacer spacer4 = new Spacer();
		panel.add(spacer4, cc.xy(3, 35, CellConstraints.DEFAULT, CellConstraints.FILL));
		speciesValidLabel = new JLabel();
		speciesValidLabel.setText("");
		panel.add(speciesValidLabel, cc.xy(3, 7));
		sciNameLabel = new JLabel();
		this.$$$loadLabelText$$$(sciNameLabel, this.$$$getMessageFromBundle$$$("ia", "scientific.name"));
		panel.add(sciNameLabel, cc.xy(3, 9));
		sciNameField = new JTextField();
		panel.add(sciNameField, cc.xy(3, 11, CellConstraints.FILL, CellConstraints.DEFAULT));
		sizePanel = new JPanel();
		sizePanel.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow", "center:d:grow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
		panel.add(sizePanel, cc.xy(3, 17));
		sizeLowerSpinner = new JSpinner();
		sizePanel.add(sizeLowerSpinner, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
		sizeUpperSpinner = new JSpinner();
		sizePanel.add(sizeUpperSpinner, cc.xy(5, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
		sizeToLabel = new JLabel();
		this.$$$loadLabelText$$$(sizeToLabel, this.$$$getMessageFromBundle$$$("ia", "to"));
		sizePanel.add(sizeToLabel, cc.xy(3, 3));
		sizeLabel = new JLabel();
		sizeLabel.setText("Wingspan (cm)");
		panel.add(sizeLabel, cc.xy(3, 15));
		flightTimeLabel = new JLabel();
		flightTimeLabel.setText("Flies from");
		panel.add(flightTimeLabel, cc.xy(3, 19));
		sciNameValidLabel = new JLabel();
		sciNameValidLabel.setText("");
		panel.add(sciNameValidLabel, cc.xy(3, 13));
		flightPanel = new JPanel();
		flightPanel.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow", "center:d:grow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
		panel.add(flightPanel, cc.xy(3, 21));
		flightStartSpinner = new JSpinner();
		flightPanel.add(flightStartSpinner, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
		flightToLabel = new JLabel();
		this.$$$loadLabelText$$$(flightToLabel, this.$$$getMessageFromBundle$$$("ia", "to"));
		flightPanel.add(flightToLabel, cc.xy(3, 3));
		flightEndSpinner = new JSpinner();
		flightPanel.add(flightEndSpinner, cc.xy(5, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
		habitatLabel = new JLabel();
		this.$$$loadLabelText$$$(habitatLabel, this.$$$getMessageFromBundle$$$("ia", "habitat"));
		panel.add(habitatLabel, cc.xy(3, 23));
		habitatField = new JTextField();
		panel.add(habitatField, cc.xy(3, 25, CellConstraints.FILL, CellConstraints.DEFAULT));
		foodLabel = new JLabel();
		foodLabel.setText("Food sources");
		panel.add(foodLabel, cc.xy(3, 27));
		foodField = new JTextField();
		panel.add(foodField, cc.xy(3, 29, CellConstraints.FILL, CellConstraints.DEFAULT));
		submitButton = new JButton();
		this.$$$loadButtonText$$$(submitButton, this.$$$getMessageFromBundle$$$("ia", "submit"));
		panel.add(submitButton, cc.xy(3, 31));
		cancelButton = new JButton();
		this.$$$loadButtonText$$$(cancelButton, this.$$$getMessageFromBundle$$$("ia", "cancel"));
		panel.add(cancelButton, cc.xy(3, 33));
		speciesLabel.setLabelFor(speciesField);
		sciNameLabel.setLabelFor(sciNameField);
		habitatLabel.setLabelFor(habitatField);
	}

	private static Method $$$cachedGetBundleMethod$$$ = null;

	private String $$$getMessageFromBundle$$$(String path, String key) {
		ResourceBundle bundle;
		try {
			Class<?> thisClass = this.getClass();
			if ($$$cachedGetBundleMethod$$$ == null) {
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch (Exception e) {
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel;
	}

	//spotless:on
}
