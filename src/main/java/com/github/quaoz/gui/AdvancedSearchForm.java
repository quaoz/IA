package com.github.quaoz.gui;

import com.github.quaoz.Main;
import com.github.quaoz.Moth;
import com.github.quaoz.MothManager;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.ResourceBundle;

public class AdvancedSearchForm {
	private static Method $$$cachedGetBundleMethod$$$ = null;
	private JTextField nameField;
	private JTextField locationField;
	private JTextField habitatField;
	private JTextField foodField;
	private JTextField sizeStartField;
	private JTextField sizeEndField;
	private JButton searchButton;
	private JLabel nameLabel;
	private JLabel locationLabel;
	private JLabel sizeLabel;
	private JLabel flightTimeLabel;
	private JLabel habitatLabel;
	private JLabel foodLabel;
	private JTextField flightStartField;
	private JTextField flightEndField;
	private JLabel titleLabel;
	private JButton cancelButton;
	private JPanel panel;

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	public AdvancedSearchForm() {
		cancelButton.addActionListener(e -> Main.getGui().render(GUI.Content.PAST_CONTENT));

		//FIXME
		searchButton.addActionListener(e -> {
			//TODO: Do search
			ArrayList<Moth> moths = MothManager.advancedSearch(nameField.getText().strip(), locationField.getText().strip(), Integer.getInteger(sizeStartField.getText().strip()), Integer.getInteger(sizeEndField.getText().strip()), Integer.getInteger(flightStartField.getText().strip()), Integer.getInteger(flightEndField.getText().strip()), habitatField.getText().strip(), foodField.getText().strip());

			/*
			* Some things dont need to be fuzzy searched.
			* If size or flight time is given first get records which match them
			* Food sources should use token search
			* Habitat, name and location fuzzy
			* */

			String[] records = new String[moths.size()];
			for (int i = 0; i < moths.size(); i++) {
				records[i] = moths.get(i).getName();
			}

			Main.getGui().render(GUI.Content.SEARCH_RESULTS);
		});
	}

	public JPanel resolve() {
		return panel;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panel = new JPanel();
		panel.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,center:max(d;4px):noGrow"));
		panel.setMinimumSize(new Dimension(360, 270));
		panel.setPreferredSize(new Dimension(360, 270));
		final Spacer spacer1 = new Spacer();
		CellConstraints cc = new CellConstraints();
		panel.add(spacer1, cc.xyw(5, 1, 5, CellConstraints.DEFAULT, CellConstraints.FILL));
		final Spacer spacer2 = new Spacer();
		panel.add(spacer2, cc.xyw(5, 18, 5, CellConstraints.DEFAULT, CellConstraints.FILL));
		final Spacer spacer3 = new Spacer();
		panel.add(spacer3, cc.xy(1, 18, CellConstraints.RIGHT, CellConstraints.DEFAULT));
		final Spacer spacer4 = new Spacer();
		panel.add(spacer4, cc.xy(11, 2, CellConstraints.RIGHT, CellConstraints.DEFAULT));
		nameField = new JTextField();
		panel.add(nameField, cc.xyw(5, 5, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
		locationField = new JTextField();
		panel.add(locationField, cc.xyw(5, 7, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
		habitatField = new JTextField();
		panel.add(habitatField, cc.xyw(5, 13, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
		foodField = new JTextField();
		panel.add(foodField, cc.xyw(5, 15, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
		sizeStartField = new JTextField();
		sizeStartField.setMinimumSize(new Dimension(49, 30));
		panel.add(sizeStartField, cc.xy(5, 9, CellConstraints.FILL, CellConstraints.DEFAULT));
		sizeEndField = new JTextField();
		panel.add(sizeEndField, cc.xy(9, 9, CellConstraints.FILL, CellConstraints.DEFAULT));
		final JLabel label1 = new JLabel();
		this.$$$loadLabelText$$$(label1, this.$$$getMessageFromBundle$$$("ia", "to"));
		panel.add(label1, cc.xyw(7, 9, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));
		flightStartField = new JTextField();
		panel.add(flightStartField, cc.xy(5, 11, CellConstraints.FILL, CellConstraints.DEFAULT));
		flightEndField = new JTextField();
		panel.add(flightEndField, cc.xy(9, 11, CellConstraints.FILL, CellConstraints.DEFAULT));
		final JLabel label2 = new JLabel();
		this.$$$loadLabelText$$$(label2, this.$$$getMessageFromBundle$$$("ia", "to"));
		panel.add(label2, cc.xy(7, 11, CellConstraints.CENTER, CellConstraints.DEFAULT));
		nameLabel = new JLabel();
		this.$$$loadLabelText$$$(nameLabel, this.$$$getMessageFromBundle$$$("ia", "name"));
		panel.add(nameLabel, cc.xy(3, 5));
		locationLabel = new JLabel();
		this.$$$loadLabelText$$$(locationLabel, this.$$$getMessageFromBundle$$$("ia", "location"));
		panel.add(locationLabel, cc.xy(3, 7));
		sizeLabel = new JLabel();
		this.$$$loadLabelText$$$(sizeLabel, this.$$$getMessageFromBundle$$$("ia", "size"));
		panel.add(sizeLabel, cc.xy(3, 9));
		flightTimeLabel = new JLabel();
		this.$$$loadLabelText$$$(flightTimeLabel, this.$$$getMessageFromBundle$$$("ia", "flies.from"));
		panel.add(flightTimeLabel, cc.xy(3, 11));
		habitatLabel = new JLabel();
		this.$$$loadLabelText$$$(habitatLabel, this.$$$getMessageFromBundle$$$("ia", "habitat"));
		panel.add(habitatLabel, cc.xy(3, 13));
		foodLabel = new JLabel();
		this.$$$loadLabelText$$$(foodLabel, this.$$$getMessageFromBundle$$$("ia", "food.sources"));
		panel.add(foodLabel, cc.xy(3, 15));
		searchButton = new JButton();
		this.$$$loadButtonText$$$(searchButton, this.$$$getMessageFromBundle$$$("ia", "search"));
		panel.add(searchButton, cc.xy(9, 17));
		titleLabel = new JLabel();
		this.$$$loadLabelText$$$(titleLabel, this.$$$getMessageFromBundle$$$("ia", "advanced.search"));
		panel.add(titleLabel, cc.xyw(5, 3, 5));
		cancelButton = new JButton();
		this.$$$loadButtonText$$$(cancelButton, this.$$$getMessageFromBundle$$$("ia", "cancel"));
		panel.add(cancelButton, cc.xy(5, 17));
		label1.setLabelFor(sizeEndField);
		label2.setLabelFor(flightEndField);
		locationLabel.setLabelFor(locationField);
		sizeLabel.setLabelFor(sizeStartField);
		flightTimeLabel.setLabelFor(flightStartField);
		habitatLabel.setLabelFor(habitatField);
		foodLabel.setLabelFor(foodField);
	}

	private String $$$getMessageFromBundle$$$(String path, String key) {
		ResourceBundle bundle;
		try {
			Class<?> thisClass = this.getClass();
			if ($$$cachedGetBundleMethod$$$ == null) {
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch (Exception e) {
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel;
	}

}
