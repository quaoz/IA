package com.github.quaoz.gui;

import com.github.quaoz.managers.UserManager;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.ResourceBundle;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class ApproveRequests {

	private JButton backButton;
	private JPanel panel;
	private JScrollPane requestScrollPane;
	private JTable requestTable;
	private String[][] data;

	public ApproveRequests() {
		$$$setupUI$$$();
		backButton.addActionListener(e ->
				GUI.getInstance().render(GUI.Content.PAST_CONTENT)
		);

		// Hacky way to prevent editing
		requestTable.setDefaultEditor(Object.class, null);

		requestTable.addMouseListener(
				new MouseAdapter() {
					@Override
					public void mouseClicked(MouseEvent e) {
						int row = requestTable.rowAtPoint(e.getPoint());
						int column = requestTable.columnAtPoint(e.getPoint());

						String user = data[row][0];
						if (column == 2) {
							UserManager.getInstance().upgradeUserAuthLevel(user);
							((DefaultTableModel) requestTable.getModel()).removeRow(row);
						} else if (column == 3) {
							UserManager.getInstance().declineUserAuthRequest(user);
							((DefaultTableModel) requestTable.getModel()).removeRow(row);
						}
					}
				}
		);
	}

	public JPanel resolve() {
		String[] columnNames = {"User", "Level", "Approve", "Decline"};
		HashMap<String, Integer> map = UserManager.getInstance().getAuthRequests();

		data = new String[map.size()][4];

		final int[] count = {0};
		map.forEach((k, v) -> {
			data[count[0]][0] = k;
			data[count[0]][1] = UserManager.UserAuthLevels.get(v + 1).toString();
			data[count[0]][2] = "Approve";
			data[count[0]][3] = "Decline";
			count[0]++;
		});

		requestTable.setModel(new DefaultTableModel(data, columnNames));

		return panel;
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		panel = new JPanel();
		panel.setLayout(new FormLayout("fill:d:grow", "center:d:grow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
		backButton = new JButton();
		this.$$$loadButtonText$$$(backButton, this.$$$getMessageFromBundle$$$("ia", "back"));
		CellConstraints cc = new CellConstraints();
		panel.add(backButton, cc.xy(1, 3));
		requestScrollPane = new JScrollPane();
		panel.add(requestScrollPane, cc.xy(1, 1, CellConstraints.FILL, CellConstraints.FILL));
		requestTable = new JTable();
		requestScrollPane.setViewportView(requestTable);
	}

	private static Method $$$cachedGetBundleMethod$$$ = null;

	private String $$$getMessageFromBundle$$$(String path, String key) {
		ResourceBundle bundle;
		try {
			Class<?> thisClass = this.getClass();
			if ($$$cachedGetBundleMethod$$$ == null) {
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch (Exception e) {
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel;
	}

	// spotless:on
}
