package com.github.quaoz.gui;

import com.github.quaoz.managers.RecordManager;
import com.github.quaoz.managers.UserManager;
import com.github.quaoz.structures.Moth;
import com.github.quaoz.structures.Pair;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class Profile {

	private ArrayList<Pair<Integer, Moth>> records;
	private JPanel panel;
	private JScrollPane recordScrollPane;
	private JTable table;
	private JButton signOutButton;
	private JButton requestAuth;
	private JButton approveAuth;
	private ProfileBar profileBar;

	public Profile() {
		// TODO: allow users to remove records
		$$$setupUI$$$();

		// Hacky way to prevent editing
		table.setDefaultEditor(Object.class, null);
		table.addMouseListener(
			new MouseAdapter() {
				@Override
				public void mouseClicked(MouseEvent e) {
					int row = table.rowAtPoint(e.getPoint());
					int column = table.columnAtPoint(e.getPoint());

					Pair<Integer, Moth> record = records.get(row);
					if (column == 6) {
						if (
							new ConfirmRemoveDialog(
								"Are you sure you want to remove this record?",
								"Yes",
								"No"
							)
								.isOk()
						) {
							RecordManager.getInstance().remove(record.getKey());
							((DefaultTableModel) table.getModel()).removeRow(row);
						}
					}
				}
			}
		);

		signOutButton.addActionListener(e -> {
			UserManager.getInstance().setUser("");
			GUI.getInstance().render(GUI.Content.HOME);
		});
		requestAuth.addActionListener(e -> UserManager.getInstance().requestAuth());
		approveAuth.addActionListener(e ->
			GUI.getInstance().render(GUI.Content.APPROVE_REQUESTS)
		);
	}

	public JPanel resolve() {
		this.records =
			RecordManager
				.getInstance()
				.searchUser(UserManager.getInstance().getUser());

		List<String> columnNames = Arrays.asList(
			"Species",
			"Scientific Name",
			"Size",
			"Flight",
			"Habitat",
			"Food Sources",
			"Remove"
		);

		String[][] data = new String[records.size()][columnNames.size()];

		int count = 0;
		for (Pair<Integer, Moth> record : records) {
			Moth moth = record.getValue();
			data[count][0] = moth.name();
			data[count][1] = moth.sciName();
			data[count][2] = moth.sizeLower() + " - " + moth.sizeUpper();
			data[count][3] = moth.flightStart() + " - " + moth.flightEnd();
			data[count][4] = moth.habitat();
			data[count][5] = moth.food();
			data[count][6] = "Remove";
			count++;
		}

		table.setModel(new DefaultTableModel(data, columnNames.toArray()));

		approveAuth.setVisible(false);
		requestAuth.setVisible(true);

		switch (UserManager.getInstance().getUserAuthLevel()) {
			case USER -> requestAuth.setText("Request Moderator Status");
			case MODERATOR -> requestAuth.setText("Request Admin Status");
			case ADMIN -> {
				approveAuth.setVisible(true);
				requestAuth.setVisible(false);
			}
		}

		return panel;
	}

	// spotless:off

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		panel = new JPanel();
		panel.setLayout(new GridLayoutManager(6, 4, new Insets(0, 0, 0, 0), -1, -1));
		panel.setMinimumSize(new Dimension(768, 768));
		panel.setPreferredSize(new Dimension(768, 768));
		recordScrollPane = new JScrollPane();
		panel.add(recordScrollPane, new GridConstraints(2, 2, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
		table = new JTable();
		recordScrollPane.setViewportView(table);
		signOutButton = new JButton();
		this.$$$loadButtonText$$$(signOutButton, this.$$$getMessageFromBundle$$$("ia", "sign.out"));
		panel.add(signOutButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(141, 30), null, 0, false));
		final Spacer spacer1 = new Spacer();
		panel.add(spacer1, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(141, 14), null, 0, false));
		final Spacer spacer2 = new Spacer();
		panel.add(spacer2, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		requestAuth = new JButton();
		requestAuth.setText("");
		panel.add(requestAuth, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(141, 30), null, 0, false));
		approveAuth = new JButton();
		approveAuth.setText("Auth Requests");
		panel.add(approveAuth, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(141, 30), null, 0, false));
		final Spacer spacer3 = new Spacer();
		panel.add(spacer3, new GridConstraints(5, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		final Spacer spacer4 = new Spacer();
		panel.add(spacer4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
		panel.add(profileBar, new GridConstraints(1, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
	}

	private static Method $$$cachedGetBundleMethod$$$ = null;

	private String $$$getMessageFromBundle$$$(String path, String key) {
		ResourceBundle bundle;
		try {
			Class<?> thisClass = this.getClass();
			if ($$$cachedGetBundleMethod$$$ == null) {
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch (Exception e) {
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel;
	}

	private void createUIComponents() {
		profileBar = new ProfileBar();
	}

	//spotless:on
}
