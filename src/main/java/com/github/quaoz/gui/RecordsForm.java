package com.github.quaoz.gui;

import com.github.quaoz.managers.RecordManager;
import com.github.quaoz.structures.Record;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import java.awt.*;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.swing.*;

public class RecordsForm {

	private final ArrayList<Record> records;
	private JButton backButton;
	private JPanel panel;
	private JTable table;
	private JScrollPane recordsScrollPane;

	public RecordsForm() {
		records =
			RecordManager
				.getInstance()
				.getSpecies(GUI.getInstance().getRecord().name());
		$$$setupUI$$$();
		backButton.addActionListener(e ->
			GUI.getInstance().render(GUI.Content.PAST_CONTENT)
		);
	}

	public JPanel resolve() {
		return panel;
	}

	private void createUIComponents() {
		// TODO: place custom component creation code here
		String[] columnNames = {
			"ID",
			"Species",
			"Location",
			"Date",
			"Size",
			"User",
		};
		String[][] data = new String[records.size()][6];

		int count = 0;
		for (Record record : records) {
			data[count][0] = String.valueOf(record.id());
			data[count][1] = record.species();
			data[count][2] = record.location();
			data[count][3] = record.date();
			data[count][4] = String.valueOf(record.size());
			data[count][5] = record.user();
			count++;
		}

		table = new JTable(data, columnNames);

		// Hacky way to prevent editing
		table.setDefaultEditor(Object.class, null);
	}

	// spotless:off

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		panel = new JPanel();
		panel.setLayout(new FormLayout("fill:d:grow", "center:367px:grow,center:max(d;4px):noGrow"));
		panel.setMinimumSize(new Dimension(768, 768));
		panel.setPreferredSize(new Dimension(768, 768));
		recordsScrollPane = new JScrollPane();
		CellConstraints cc = new CellConstraints();
		panel.add(recordsScrollPane, cc.xy(1, 1, CellConstraints.FILL, CellConstraints.FILL));
		recordsScrollPane.setViewportView(table);
		backButton = new JButton();
		this.$$$loadButtonText$$$(backButton, this.$$$getMessageFromBundle$$$("ia", "back"));
		panel.add(backButton, cc.xy(1, 2));
	}

	private static Method $$$cachedGetBundleMethod$$$ = null;

	private String $$$getMessageFromBundle$$$(String path, String key) {
		ResourceBundle bundle;
		try {
			Class<?> thisClass = this.getClass();
			if ($$$cachedGetBundleMethod$$$ == null) {
				Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
				$$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
			}
			bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
		} catch (Exception e) {
			bundle = ResourceBundle.getBundle(path);
		}
		return bundle.getString(key);
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadButtonText$$$(AbstractButton component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return panel;
	}

	// spotless:on
}
